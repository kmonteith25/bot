import logging
from os.path import splitext

from discord import Embed, Message, NotFound
from discord.ext.commands import Cog

from bot.bot import Bot
from bot.constants import AntiMalware as AntiMalwareConfig, Channels, STAFF_ROLES, URLs

log = logging.getLogger(__name__)


class AntiMalware(Cog):
    """Delete messages which contain attachments with non-whitelisted file extensions."""

    def __init__(self, bot: Bot):
        self.bot = bot

    @Cog.listener()
    async def on_message(self, message: Message) -> None:
        """Identify messages with prohibited attachments."""
        # Return when message don't have attachment and don't moderate DMs
        if not message.attachments or not message.guild:
            return

        # Check if user is staff, if is, return
        # Since we only care that roles exist to iterate over, check for the attr rather than a User/Member instance
        if hasattr(message.author, "roles") and any(role.id in STAFF_ROLES for role in message.author.roles):
            return

        embed = Embed()
        file_extensions = {splitext(attachment.filename.lower())[1] for attachment in message.attachments}
        extensions_blocked = file_extensions - set(AntiMalwareConfig.whitelist)
        blocked_extensions_str = ', '.join(extensions_blocked)

        if ".py" in extensions_blocked:
            # Short-circuit on *.py files to provide a pastebin link
            embed.description = (
                "It looks like you tried to attach a Python file - "
                f"please use a code-pasting service such as {URLs.site_schema}{URLs.site_paste}"
            )
        elif ".txt" in extensions_blocked:
            embed.description = (
                "It looks like you tried to attach a text file - "
                f"please use a code-pasting service such as {URLs.site_schema}{URLs.site_paste}"
            )
        elif extensions_blocked:
            whitelisted_types = ', '.join(AntiMalwareConfig.whitelist)
            meta_channel = self.bot.get_channel(Channels.meta)
            embed.description = (
                f"It looks like you tried to attach file type(s) that we do not allow ({blocked_extensions_str}). "
                f"We currently allow the following file types: **{whitelisted_types}**.\n\n"
                f"Feel free to ask in {meta_channel.mention} if you think this is a mistake."
            )

        if embed.description:
            log.info(
                f"User '{message.author}' ({message.author.id}) uploaded blacklisted file(s): {blocked_extensions_str}",
                extra={"attachment_list": [attachment.filename for attachment in message.attachments]}
            )

            await message.channel.send(f"Hey {message.author.mention}!", embed=embed)

            # Delete the offending message:
            try:
                await message.delete()
            except NotFound:
                log.info(f"Tried to delete message `{message.id}`, but message could not be found.")


def setup(bot: Bot) -> None:
    """Load the AntiMalware cog."""
    bot.add_cog(AntiMalware(bot))
